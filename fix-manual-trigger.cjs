#!/usr/bin/env node

const fs = require('fs');

const filePath = 'src/lib/progressive-capture/manual-trigger.ts';
let content = fs.readFileSync(filePath, 'utf8');

// Fix all the multi-line template literal console.log statements
const fixes = [
  {
    // Line 29-54: analyze() method
    old: /console\.log\(`\nüìä Data Gap Analysis Results:[\s\S]*?\n    `\);/,
    replacement: `console.log(
      '\\nüìä Data Gap Analysis Results:\\n' +
      '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n' +
      '\\nüïê Stale Data:\\n' +
      '  ‚Ä¢ %s repositories with data older than 3 days\\n' +
      '\\nüìä Missing Data:\\n' +
      '  ‚Ä¢ %s PRs without file change data (additions/deletions)\\n' +
      '  ‚Ä¢ Reviews table: %s\\n' +
      '  ‚Ä¢ Comments table: %s\\n' +
      '  ‚Ä¢ Commits table: %s\\n' +
      '\\n‚ö° Current Queue Status:\\n' +
      '  ‚Ä¢ %s jobs pending\\n' +
      '  ‚Ä¢ %s jobs processing\\n' +
      '  ‚Ä¢ %s jobs completed\\n' +
      '  ‚Ä¢ %s jobs failed\\n' +
      '  ‚Ä¢ üîÑ Inngest: %s pending, %s processing\\n' +
      '  ‚Ä¢ üèóÔ∏è GitHub Actions: %s pending, %s processing\\n' +
      '\\nüí° Recommendations:\\n' +
      '%s\\n' +
      '%s\\n' +
      '%s',
      gaps.repositoriesWithStaleData,
      gaps.prsWithoutFileChanges,
      gaps.emptyReviewsTable ? '‚ùå Empty' : '‚úÖ Has data',
      gaps.emptyCommentsTable ? '‚ùå Empty' : '‚úÖ Has data',
      gaps.emptyCommitsTable ? '‚ùå Empty' : '‚úÖ Has data',
      queueStats.total.pending,
      queueStats.total.processing,
      queueStats.total.completed,
      queueStats.total.failed,
      queueStats.inngest.pending,
      queueStats.inngest.processing,
      queueStats.github_actions.pending,
      queueStats.github_actions.processing,
      gaps.repositoriesWithStaleData > 0 ? '  ‚Ä¢ Run bootstrap to queue recent PRs for stale repositories' : '  ‚Ä¢ ‚úÖ Repository data is fresh',
      gaps.prsWithoutFileChanges > 0 ? '  ‚Ä¢ Run bootstrap to queue file change updates' : '  ‚Ä¢ ‚úÖ File change data is complete',
      gaps.emptyReviewsTable ? '  ‚Ä¢ Consider queuing review data (lower priority)' : '  ‚Ä¢ ‚úÖ Review data available'
    );`
  },
  {
    // Line 68-79: bootstrap() method
    old: /console\.log\(`\n‚úÖ Bootstrap completed successfully![\s\S]*?\n      `\);/,
    replacement: `console.log(
      '\\n‚úÖ Bootstrap completed successfully!\\n' +
      '\\nüìà Queue Status:\\n' +
      '  ‚Ä¢ %s jobs queued and ready to process\\n' +
      '  ‚Ä¢ %s total jobs in queue\\n' +
      '\\nüîÑ Next Steps:\\n' +
      '  1. The queue will automatically process jobs when the app is active\\n' +
      '  2. Monitor progress with: ProgressiveCaptureTrigger.status()\\n' +
      '  3. Check rate limits with: ProgressiveCaptureTrigger.rateLimits()',
      queueStats.total.pending,
      queueStats.total.pending + queueStats.total.processing + queueStats.total.completed
    );`
  },
  {
    // Line 93-124: status() method
    old: /console\.log\(`\nüìä Queue Status Report:[\s\S]*?\n    `\);/,
    replacement: `console.log(
      '\\nüìä Queue Status Report:\\n' +
      '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n' +
      '\\nüìã Job Counts:\\n' +
      '  ‚Ä¢ Pending: %s\\n' +
      '  ‚Ä¢ Processing: %s\\n' +
      '  ‚Ä¢ Completed: %s\\n' +
      '  ‚Ä¢ Failed: %s\\n' +
      '  ‚Ä¢ Total: %s\\n' +
      '\\nüîÑ Inngest Jobs:\\n' +
      '  ‚Ä¢ Pending: %s\\n' +
      '  ‚Ä¢ Processing: %s\\n' +
      '  ‚Ä¢ Completed: %s\\n' +
      '  ‚Ä¢ Failed: %s\\n' +
      '\\nüèóÔ∏è GitHub Actions Jobs:\\n' +
      '  ‚Ä¢ Pending: %s\\n' +
      '  ‚Ä¢ Processing: %s\\n' +
      '  ‚Ä¢ Completed: %s\\n' +
      '  ‚Ä¢ Failed: %s\\n' +
      '\\nüîÑ Processing Status:\\n' +
      '  ‚Ä¢ Can make API calls: %s\\n' +
      '  ‚Ä¢ Queue health: %s\\n' +
      '\\nüí° Actions:\\n' +
      '  ‚Ä¢ To process manually: ProgressiveCaptureTrigger.processNext()\\n' +
      '  ‚Ä¢ To check rate limits: ProgressiveCaptureTrigger.rateLimits()\\n' +
      '  ‚Ä¢ To see detailed monitoring: ProgressiveCaptureTrigger.monitoring()',
      stats.total.pending,
      stats.total.processing,
      stats.total.completed,
      stats.total.failed,
      stats.total.pending + stats.total.processing + stats.total.completed + stats.total.failed,
      stats.inngest.pending,
      stats.inngest.processing,
      stats.inngest.completed,
      stats.inngest.failed,
      stats.github_actions.pending,
      stats.github_actions.processing,
      stats.github_actions.completed,
      stats.github_actions.failed,
      canMakeAPICalls ? '‚úÖ Yes' : '‚ùå No (rate limited)',
      getQueueHealthStatus(stats.total.pending, stats.total.completed, stats.total.failed || 0)
    );`
  },
  {
    // Line 164-174: rateLimits() method
    old: /console\.log\(`\nüîí Rate Limit Status:[\s\S]*?\n    `\);/,
    replacement: `console.log(
      '\\nüîí Rate Limit Status:\\n' +
      '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n' +
      '\\n‚úÖ Can make 1 API call: %s\\n' +
      '‚ö° Can make 10 API calls: %s\\n' +
      'üöÄ Can make 100 API calls: %s\\n' +
      '\\nüí° Recommendations:\\n' +
      '%s',
      canMake1 ? 'Yes' : 'No',
      canMake10 ? 'Yes' : 'No',
      canMake100 ? 'Yes' : 'No',
      getBatchCapabilityMessage(canMake100, canMake10, !canMake1)
    );`
  },
  {
    // Line 212-217: analyzeCommits() method
    old: /console\.log\(`\n‚úÖ Commit analysis queued for \$\{owner\}\/\$\{repo\}:[\s\S]*?\n      `\);/,
    replacement: `console.log(
      '\\n‚úÖ Commit analysis queued for %s/%s:\\n' +
      '  ‚Ä¢ %s commits queued for PR association analysis\\n' +
      '  ‚Ä¢ This will enable YOLO coder detection\\n' +
      '  ‚Ä¢ Use ProgressiveCapture.processNext() to process manually',
      owner,
      repo,
      queuedCount
    );`
  },
  {
    // Line 348-355: quickFix() method
    old: /console\.log\(`\n‚úÖ Quick fix queued for \$\{owner\}\/\$\{repo\}:[\s\S]*?\n        `\);/,
    replacement: `console.log(
      '\\n‚úÖ Quick fix queued for %s/%s:\\n' +
      '  ‚Ä¢ Recent data: Queued (%s processor)\\n' +
      '  ‚Ä¢ Historical data: Queued (%s processor)\\n' +
      '  ‚Ä¢ AI Summary: %s\\n' +
      '  ‚Ä¢ Total: %s jobs queued\\n' +
      '  ‚Ä¢ Smart routing: Recent data ‚Üí Inngest, Historical data ‚Üí GitHub Actions',
      owner,
      repo,
      recentJob.processor,
      historicalJob.processor,
      aiSummaryQueued ? 'Queued' : 'Skipped (recent)',
      totalJobs
    );`
  },
  {
    // Line 406-420: routingAnalysis() method
    old: /console\.log\(`\nüéØ Routing Effectiveness Analysis:[\s\S]*?\n      `\);/,
    replacement: `console.log(
      '\\nüéØ Routing Effectiveness Analysis:\\n' +
      '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n' +
      '\\nüìà Routing Accuracy: %s%\\n' +
      '‚úÖ Correct Routing: %s jobs\\n' +
      '‚ö†Ô∏è Suboptimal Routing: %s jobs\\n' +
      '\\n%s',
      routing.routingAccuracy.toFixed(1),
      routing.correctRouting,
      routing.suboptimalRouting,
      routing.suggestions.length > 0
        ? \`üí° Suggestions:\\n\${routing.suggestions.map((s) => \`  ‚Ä¢ \${s}\`).join('\\n')}\`
        : '‚úÖ No routing issues detected'
    );`
  }
];

// Apply each fix
fixes.forEach((fix, index) => {
  const newContent = content.replace(fix.old, fix.replacement);
  if (newContent === content) {
    console.error('Fix ' + (index + 1) + ' did not match!');
  } else {
    content = newContent;
    console.log('Applied fix ' + (index + 1));
  }
});

// Also fix the template literal console.error/warn statements
content = content.replace(
  /console\.error\(`‚ùå Commit analysis failed for \$\{owner\}\/\$\{repo\}:`, error\);/g,
  "console.error('‚ùå Commit analysis failed for %s/%s:', owner, repo, error);"
);

content = content.replace(
  /console\.warn\(`Failed to store PR #\$\{pr\.number\}: \$\{result\.error\}`\);/g,
  "console.warn('Failed to store PR #%s: %s', pr.number, result.error);"
);

content = content.replace(
  /console\.warn\(`Error storing PR #\$\{pr\.number\}:`, prError\);/g,
  "console.warn('Error storing PR #%s:', pr.number, prError);"
);

content = content.replace(
  /console\.log\(\s*`‚úÖ Imported \$\{importedCount\}\/\$\{recentPRs\.length\} recent PRs for \$\{repo\.owner\}\/\$\{repo\.name\}`\s*\);/g,
  "console.log('‚úÖ Imported %s/%s recent PRs for %s/%s', importedCount, recentPRs.length, repo.owner, repo.name);"
);

content = content.replace(
  /console\.error\(`‚ùå Error processing recent PRs job:`, error\);/g,
  "console.error('‚ùå Error processing recent PRs job:', error);"
);

content = content.replace(
  /console\.warn\(`‚ö†Ô∏è Large repository detected: \$\{owner\}\/\$\{repo\} has \$\{prCount\} PRs`\);/g,
  "console.warn('‚ö†Ô∏è Large repository detected: %s/%s has %s PRs', owner, repo, prCount);"
);

// Write the fixed content back
fs.writeFileSync(filePath, content);
console.log('\\nFixed all template literal console statements in manual-trigger.ts!');