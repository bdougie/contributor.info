import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';
import { Copy, Download, Link2 } from '@/components/ui/icon';
import { toast } from 'sonner';
import type { CitationFormat, WidgetData, PermalinkConfig } from './widget-types';

interface CitationGeneratorProps {
  data: WidgetData;
  permalinkConfig?: PermalinkConfig;
}

const CITATION_FORMATS: Record<
  CitationFormat['style'],
  (_data: WidgetData, date: Date, url: string) => string
> = {
  apa: (_data, date, url) =>
    `Contributor.info. (${date.getFullYear()}). ${data.repository.owner}/${data.repository.repo} repository analytics. Retrieved ${date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}, from ${url}`,

  mla: (_data, date, url) =>
    `Contributor.info. "${data.repository.owner}/${data.repository.repo} Repository Analytics." Contributor.info, ${date.getDate()} ${date.toLocaleDateString('en-US', { month: 'short' })} ${date.getFullYear()}, ${url}.`,

  chicago: (_data, date, url) =>
    `Contributor.info. "${data.repository.owner}/${data.repository.repo} Repository Analytics." Accessed ${date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}. ${url}.`,

  ieee: (_data, date, url) =>
    `Contributor.info, "${data.repository.owner}/${data.repository.repo} repository analytics," accessed ${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}. [Online]. Available: ${url}`,

  bibtex: (_data, date, url) =>
    `@misc{contributor_info_${data.repository.owner}_${data.repository.repo}_${date.getFullYear()},
  title={${data.repository.owner}/${data.repository.repo} Repository Analytics},
  author={Contributor.info},
  year={${date.getFullYear()}},
  url={${url}},
  note={Accessed: ${date.toISOString().split('T')[0]}}
}`,

  plain: (_data, date, url) =>
    `${data.repository.owner}/${data.repository.repo} repository analytics by Contributor.info. Data retrieved on ${date.toLocaleDateString()} from ${url}`,
};

export function CitationGenerator({ _data, permalinkConfig }: CitationGeneratorProps) {
  const [selectedFormat, setSelectedFormat] = useState<CitationFormat['style']>('apa');
  const [copiedFormat, setCopiedFormat] = useState<string | null>(null);

  const currentDate = new Date();
  const baseURL =
    typeof window !== 'undefined' ? window.location.origin : 'https://contributor.info';
  const citationURL = `${baseURL}/${data.repository.owner}/${data.repository.repo}`;

  const generateCitation = (format: CitationFormat['style']): string => {
    return CITATION_FORMATS[format](_data, currentDate, citationURL);
  };

  const copyToClipboard = async (text: string, format: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedFormat(format);
      toast.success(`${format.toUpperCase()} citation copied to clipboard`);
      setTimeout(() => setCopiedFormat(null), 2000);
    } catch {
      toast.error('Failed to copy to clipboard');
    }
  };

  const generatePermalink = (): string => {
    if (!permalinkConfig) return citationURL;

    const params = new URLSearchParams();
    params.set('cite', 'true');
    params.set('format', 'json');
    params.set('date', currentDate.toISOString().split('T')[0]);

    // Add specific parameters based on type
    Object.entries(permalinkConfig.parameters).forEach(([key, value]) => {
      params.set(key, String(value));
    });

    return `${citationURL}?${params.toString()}`;
  };

  const exportBibliography = () => {
    const citations = Object.entries(CITATION_FORMATS)
      .map(([format, generator]) => {
        return `${format.toUpperCase()}:\n${generator(_data, currentDate, citationURL)}\n`;
      })
      .join('\n');

    const content = `# Citations for ${data.repository.owner}/${data.repository.repo}
Generated on ${currentDate.toLocaleDateString()}

## Repository Statistics
- Total Contributors: ${data.stats.totalContributors}
- Total Pull Requests: ${data.stats.totalPRs}
- Merge Rate: ${data.stats.mergeRate.toFixed(1)}%
${data.stats.lotteryFactor ? `- Lottery Factor: ${data.stats.lotteryFactor.toFixed(1)} (${_data.stats.lotteryRating})` : ''}

## Citations

${citations}

## Permalink
${generatePermalink()}

---
Generated by contributor.info - https://contributor.info
`;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${data.repository.owner}-${data.repository.repo}-citations.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast.success('Bibliography exported successfully');
  };

  return (
    <Card className="embeddable-widget citation-generator">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Link2 className="h-5 w-5" />
          Citation & Attribution
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          Generate academic citations for {data.repository.owner}/{data.repository.repo} analytics
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Citation Format Selector */}
        <div className="flex flex-wrap gap-2">
          {Object.keys(CITATION_FORMATS).map((format) => (
            <Badge
              key={format}
              variant={selectedFormat === format ? 'default' : 'outline'}
              className="cursor-pointer"
              onClick={() => setSelectedFormat(format as CitationFormat['style'])}
            >
              {format.toUpperCase()}
            </Badge>
          ))}
        </div>

        {/* Citation Preview */}
        <div className="space-y-2">
          <Textarea
            value={generateCitation(selectedFormat)}
            readOnly
            className="min-h-20 text-sm resize-none"
          />
          <div className="flex gap-2">
            <Button
              size="sm"
              variant="outline"
              onClick={() => copyToClipboard(generateCitation(selectedFormat), selectedFormat)}
              className="flex items-center gap-1"
            >
              <Copy className="h-3 w-3" />
              {copiedFormat === selectedFormat ? 'Copied!' : 'Copy'}
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={exportBibliography}
              className="flex items-center gap-1"
            >
              <Download className="h-3 w-3" />
              Export All
            </Button>
          </div>
        </div>

        {/* Repository Metadata */}
        <div className="rounded-md border p-3 text-sm space-y-2">
          <div className="font-medium">Repository Information</div>
          <div className="grid grid-cols-2 gap-2 text-xs text-muted-foreground">
            <span>
              Repository: {data.repository.owner}/{data.repository.repo}
            </span>
            <span>Contributors: {data.stats.totalContributors}</span>
            <span>Pull Requests: {data.stats.totalPRs}</span>
            <span>Merge Rate: {data.stats.mergeRate.toFixed(1)}%</span>
          </div>
        </div>

        {/* Permalink */}
        <div className="space-y-2">
          <div className="text-sm font-medium">Permalink</div>
          <div className="flex gap-2">
            <Textarea
              value={generatePermalink()}
              readOnly
              className="min-h-8 text-xs resize-none"
            />
            <Button
              size="sm"
              variant="outline"
              onClick={() => copyToClipboard(generatePermalink(), 'permalink')}
            >
              <Copy className="h-3 w-3" />
            </Button>
          </div>
          <p className="text-xs text-muted-foreground">
            Use this permalink to reference specific data snapshots
          </p>
        </div>

        {/* Attribution Notice */}
        <div className="rounded-md bg-muted p-3 text-xs">
          <strong>Attribution Requirements:</strong> When using this data in academic work, please
          cite contributor.info and include the date of data retrieval. Data is sourced from
          GitHub's public API and processed for analytical insights.
        </div>
      </CardContent>
    </Card>
  );
}
