name: Performance Monitoring

on:
  pull_request_target:
    types: [opened, synchronize]
  push:
    branches: [main]
  schedule:
    # Run daily at 1:27 AM UTC (avoiding top of hour server load)
    - cron: '27 1 * * *'
  workflow_dispatch:

env:
  # Set deployment URL based on context
  DEPLOY_URL: ${{ github.event_name == 'pull_request_target' && format('https://deploy-preview-{0}--contributor-info.netlify.app', github.event.number) || 'https://contributor.info' }}

jobs:
  bundle-size-check:
    runs-on: ubuntu-latest
    name: Bundle Size Check
    if: github.event_name == 'pull_request_target'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout PR head for building and analyzing the actual PR code
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        id: bundle
        run: |
          npm run build > build.log 2>&1

          # Extract bundle sizes
          echo "### Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Chunk | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|---------|" >> $GITHUB_STEP_SUMMARY

          # Parse build output for sizes
          grep -E "dist/assets/.*\.js" build.log | while read line; do
            chunk=$(echo "$line" | awk '{print $1}' | sed 's/dist\/assets\///')
            size=$(echo "$line" | awk '{print $2 " " $3}')
            gzip=$(echo "$line" | awk '{print $5 " " $6}')
            echo "| $chunk | $size | $gzip |" >> $GITHUB_STEP_SUMMARY
          done

          # Check for oversized chunks (>600KB)
          if grep -q "(!) Some chunks are larger than 600 kB" build.log; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Warning:** Some chunks exceed 600KB limit" >> $GITHUB_STEP_SUMMARY
            echo "oversized=true" >> $GITHUB_OUTPUT
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **All chunks within size limits**" >> $GITHUB_STEP_SUMMARY
            echo "oversized=false" >> $GITHUB_OUTPUT
          fi

          # Calculate total bundle size
          total_size=$(grep "dist/assets/.*\.js" build.log | awk '{print $2}' | sed 's/[^0-9.]//g' | paste -sd+ | bc)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Bundle Size:** ${total_size} KB" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with bundle analysis
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const oversized = '${{ steps.bundle.outputs.oversized }}' === 'true';
            const emoji = oversized ? '‚ö†Ô∏è' : '‚úÖ';
            const status = oversized ? 'Some chunks exceed size limits' : 'All chunks within limits';

            // Create the comment body with a unique identifier for sticky behavior
            const commentBody = `<!-- bundle-size-analysis -->
            ## ${emoji} Bundle Size Analysis

            ${status}

            <!-- Last Updated: ${new Date().toISOString()} -->
            **Commit:** ${context.sha.substring(0, 7)}

            See the [workflow summary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for detailed bundle sizes.`;

            // Find existing bundle size comment using the HTML comment identifier
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('<!-- bundle-size-analysis -->')
            );

            if (existingComment) {
              // Update existing comment (sticky behavior)
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log(`Updated existing bundle size comment #${existingComment.id}`);
            } else {
              // Create new comment if none exists
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('Created new bundle size comment');
            }

      - name: Fail if chunks are oversized
        if: steps.bundle.outputs.oversized == 'true'
        run: |
          echo "‚ùå Build failed due to oversized chunks"
          echo "Please optimize bundle splitting to reduce chunk sizes below 600KB"
          exit 1

  lighthouse-audit:
    runs-on: ubuntu-latest
    name: Lighthouse Performance Audit
    if: github.event_name != 'pull_request_target' || github.event_name == 'pull_request_target'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout PR head for Lighthouse testing
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Wait for deployment (PR only)
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Waiting for Netlify deployment to be ready..."
          # Wait up to 5 minutes for deployment
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -s -o /dev/null -w "%{http_code}" "${{ env.DEPLOY_URL }}" | grep -q "200"; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $attempt/$max_attempts: Deployment not ready yet, waiting 30s..."
            sleep 30
            attempt=$((attempt + 1))
          done

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ env.DEPLOY_URL }}
          budgetPath: |
            ./performance-budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Format Lighthouse Results
        id: format_results
        if: always()
        run: |
          echo "## üìä Lighthouse Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URLs Tested:**" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.DEPLOY_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.DEPLOY_URL }}/vercel/next.js" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.DEPLOY_URL }}/continuedev/continue" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Core Web Vitals Targets" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **LCP:** < 2.5s" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **FCP:** < 1.8s" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **CLS:** < 0.1" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **TBT:** < 300ms" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed reports in the artifacts above." >> $GITHUB_STEP_SUMMARY

  performance-budget:
    runs-on: ubuntu-latest
    name: Performance Budget Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout PR head for performance tests
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Check bundle size
        run: |
          # Get the size of the dist folder
          if [ -d "dist" ]; then
            DIST_SIZE=$(du -sb dist | cut -f1)
            MAX_SIZE=$((6815744))  # 6.5MB limit (temporary - see issue #407)
            
            echo "Bundle size: $DIST_SIZE bytes"
            echo "Max allowed: $MAX_SIZE bytes"
            
            # Create summary
            echo "## üì¶ Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Total Bundle Size:** $(echo "scale=2; $DIST_SIZE / 1024 / 1024" | bc) MB" >> $GITHUB_STEP_SUMMARY
            echo "**Maximum Allowed:** $(echo "scale=2; $MAX_SIZE / 1024 / 1024" | bc) MB" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $DIST_SIZE -gt $MAX_SIZE ]; then
              echo "‚ùå **Status:** Bundle size exceeds limit!" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "‚úÖ **Status:** Bundle size is within limits" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå dist folder not found!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Analyze JavaScript bundles
        run: |
          echo "### JavaScript Chunk Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check individual chunk sizes
          LARGE_CHUNKS=0
          for file in dist/assets/*.js; do
            if [ -f "$file" ]; then
              SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
              MAX_CHUNK=$((200 * 1024))  # 200KB per chunk
              SIZE_KB=$(echo "scale=2; $SIZE / 1024" | bc)
              
              if [ $SIZE -gt $MAX_CHUNK ]; then
                echo "‚ö†Ô∏è **Large chunk:** $(basename $file) - ${SIZE_KB}KB" >> $GITHUB_STEP_SUMMARY
                LARGE_CHUNKS=$((LARGE_CHUNKS + 1))
              fi
            fi
          done

          if [ $LARGE_CHUNKS -eq 0 ]; then
            echo "‚úÖ All JavaScript chunks are under 200KB" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** Consider code splitting for large chunks" >> $GITHUB_STEP_SUMMARY
          fi

  web-vitals-test:
    runs-on: ubuntu-latest
    name: Web Vitals Tests
    if: github.event_name == 'pull_request_target' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout PR head for performance tests
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Web Vitals tests
        run: |
          # Check if the comparison script exists
          if [ -f "scripts/compare-web-vitals.js" ]; then
            echo "Running Web Vitals comparison..."
            node scripts/compare-web-vitals.js || true
          else
            echo "Web Vitals comparison script not found, skipping..."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_URL: https://contributor.info
          PR_URL: ${{ env.DEPLOY_URL }}

      - name: Run performance tests
        run: |
          # Run performance test suite if it exists
          if [ -f "tests/performance/web-vitals.spec.ts" ]; then
            echo "Running performance test suite..."
            npm run test:performance || true
          else
            echo "Performance tests not configured yet"
          fi
        continue-on-error: true

      - name: Generate summary
        if: always()
        run: |
          echo "## ‚ö° Web Vitals Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Performance tests completed. Check logs for detailed results." >> $GITHUB_STEP_SUMMARY

  comment-results:
    runs-on: ubuntu-latest
    name: Comment PR Results
    needs: [bundle-size-check, lighthouse-audit, performance-budget]
    if: github.event_name == 'pull_request_target' && !cancelled()

    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ env.DEPLOY_URL }}';

            const comment = `<!-- performance-report -->
            ## üöÄ Performance Report

            ### üìä Lighthouse Audit
            ‚úÖ Lighthouse tests completed for:
            - [Homepage](${url})
            - [Vercel/Next.js](${url}/vercel/next.js)
            - [Continue Dev](${url}/continuedev/continue)

            ### üì¶ Bundle Analysis
            Performance budget checks completed. See workflow summary for details.

            ### üéØ Core Web Vitals Targets
            - **LCP:** < 2.5s (Largest Contentful Paint)
            - **INP:** < 200ms (Interaction to Next Paint)
            - **CLS:** < 0.1 (Cumulative Layout Shift)
            - **FCP:** < 1.8s (First Contentful Paint)

            ### üìà Next Steps
            - Review the Lighthouse reports in the workflow artifacts
            - Check the workflow summary for detailed metrics
            - Address any performance warnings or errors

            <!-- Last Updated: ${new Date().toISOString()} -->
            **Commit:** ${context.sha.substring(0, 7)}

            [View Full Workflow Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            // Find existing performance report comment using the HTML comment identifier
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('<!-- performance-report -->')
            );

            if (existingComment) {
              // Update existing comment (sticky behavior)
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log(`Updated existing performance report comment #${existingComment.id}`);
            } else {
              // Create new comment if none exists
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('Created new performance report comment');
            }
