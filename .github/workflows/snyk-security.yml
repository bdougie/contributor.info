name: Security Scanning with Snyk MCP

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 8 * * *' # Daily at 8 AM UTC

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git diff

      - name: Get Changed Files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üìù Getting changed files since main branch..."
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | tr '\n' ' ')
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "Changed files: $CHANGED_FILES"
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "Full repository scan (not a PR)"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          echo "‚úÖ Snyk CLI installed"

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "‚ùå Error: SNYK_TOKEN secret is not set"
            exit 1
          fi
          echo "‚úÖ Required secrets are configured"

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth "$SNYK_TOKEN"
          echo "‚úÖ Snyk authenticated"

      - name: Run Security Scans
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.changed_files }}
          IS_PR: ${{ steps.changed-files.outputs.is_pr }}
        run: |
          set -e  # Exit on any error

          if [ "$IS_PR" = "true" ] && [ -n "$CHANGED_FILES" ]; then
            echo "üîç Running targeted scan on changed files..."
            echo "Changed files: $CHANGED_FILES"
            FILE_ARGS=""
            for file in $CHANGED_FILES; do
              if [[ "$file" =~ \.(js|jsx|ts|tsx|py|java|go|rb)$ ]]; then
                FILE_ARGS="$FILE_ARGS --file=$file"
              fi
            done

            if [ -n "$FILE_ARGS" ]; then
              echo "üîç Running Snyk Code scan on changed files..."
              snyk code test $FILE_ARGS --severity-threshold=high || {
                echo "‚ùå Snyk Code found high severity issues in changed files"
                exit 1
              }
            else
              echo "‚ö†Ô∏è No scannable code files changed, skipping Snyk Code scan"
            fi
          else
            echo "üîç Running full repository Snyk Code scan..."
            snyk code test --severity-threshold=high || {
              echo "‚ùå Snyk Code found high severity issues"
              exit 1
            }
          fi
          echo "‚úÖ Code vulnerability scan completed"

          echo "üì¶ Checking dependencies..."
          snyk test --severity-threshold=high || {
            echo "‚ùå Snyk Open Source found high severity issues"
            exit 1
          }
          echo "‚úÖ Dependency scan completed"

      - name: Generate Security Report
        if: always()
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "üìä Generating security report..."
          {
            echo "# Security Scan Report"
            echo ""
            echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            echo "**Branch:** ${{ github.ref_name }}"
            echo "**Commit:** ${{ github.sha }}"
            echo ""
            echo "## Snyk Code Scan"
            snyk code test --json | jq -r '.runs[0].results[] | "- **\(.level | ascii_upcase)**: \(.message.text) in \(.locations[0].physicalLocation.artifactLocation.uri)"' || echo "No issues found or scan failed"
            echo ""
            echo "## Snyk Open Source Scan"
            snyk test --json | jq -r '.vulnerabilities[] | "- **\(.severity | ascii_upcase)**: \(.title) (\(.packageName)@\(.version))"' || echo "No issues found or scan failed"
          } > scan-results.md

          if [ -f scan-results.md ]; then
            echo "‚úÖ Security report generated successfully"
            cat scan-results.md
          else
            echo "‚ö†Ô∏è Warning: scan-results.md was not created"
          fi

      - name: Upload Security Report
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: scan-results.md
          if-no-files-found: warn
