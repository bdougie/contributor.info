name: 'Continue Base Review'
description: 'Perform code review using Continue AI on pull requests'
author: 'Continue'

inputs:
  continue-api-key:
    description: 'API key for Continue service'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  model:
    description: 'Model to use for code review'
    required: false
    default: 'claude-3-5-sonnet-20241022'
  provider:
    description: 'Provider for the model'
    required: false
    default: 'anthropic'
  api-base:
    description: 'API base URL for Continue service'
    required: false
    default: 'https://api.continue.dev'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install requests PyGithub
      shell: bash

    - name: Run Continue Review
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        CONTINUE_API_KEY: ${{ inputs.continue-api-key }}
        CONTINUE_MODEL: ${{ inputs.model }}
        CONTINUE_PROVIDER: ${{ inputs.provider }}
        CONTINUE_API_BASE: ${{ inputs.api-base }}
      run: |
        cat > /tmp/continue_review.py << 'EOF'
        import os
        import json
        import requests
        from github import Github
        import sys
        import traceback

        print("=== Continue Review Agent Starting ===")

        # Get environment variables
        github_token = os.environ.get('GITHUB_TOKEN')
        continue_api_key = os.environ.get('CONTINUE_API_KEY')
        model = os.environ.get('CONTINUE_MODEL', 'claude-3-5-sonnet-20241022')
        provider = os.environ.get('CONTINUE_PROVIDER', 'anthropic')
        api_base = os.environ.get('CONTINUE_API_BASE', 'https://api.continue.dev')

        print(f"Model: {model}")
        print(f"Provider: {provider}")
        print(f"API Base: {api_base}")
        print(f"API Key present: {bool(continue_api_key)}")

        # Get GitHub context
        github_context = json.loads(os.environ.get('GITHUB_CONTEXT', '{}'))
        repo_name = github_context.get('repository', '')
        
        print(f"Repository: {repo_name}")
        
        # Handle different event types
        event_name = github_context.get('event_name', '')
        print(f"Event type: {event_name}")
        
        pr_number = None
        if event_name == 'pull_request':
            pr_number = github_context.get('event', {}).get('pull_request', {}).get('number')
        elif event_name == 'issue_comment':
            pr_number = github_context.get('event', {}).get('issue', {}).get('number')
        elif event_name == 'workflow_dispatch':
            # For manual runs, try to get PR from the context
            pr_number = github_context.get('event', {}).get('inputs', {}).get('pr_number')
            if not pr_number:
                print("Workflow dispatch without PR number, exiting")
                sys.exit(0)
        else:
            print(f"Unsupported event type: {event_name}")
            sys.exit(0)

        if not pr_number:
            print("No PR number found")
            print(f"Event data: {json.dumps(github_context.get('event', {}), indent=2)}")
            sys.exit(0)

        print(f"PR Number: {pr_number}")

        try:
            # Initialize GitHub client
            g = Github(github_token)
            repo = g.get_repo(repo_name)
            pr = repo.get_pull(pr_number)
            
            print(f"PR Title: {pr.title}")
            print(f"PR State: {pr.state}")

            # Get PR diff
            files = pr.get_files()
            
            diff_content = []
            file_count = 0
            for file in files:
                file_count += 1
                if file.patch:
                    diff_content.append(f"File: {file.filename}\n{file.patch}")
            
            print(f"Files changed: {file_count}")
            
            if not diff_content:
                print("No changes to review")
                sys.exit(0)

            full_diff = "\n\n".join(diff_content)
            diff_size = len(full_diff)
            print(f"Diff size: {diff_size} characters")

            # Truncate diff if too large
            max_diff_size = 8000
            if diff_size > max_diff_size:
                full_diff = full_diff[:max_diff_size] + "\n\n... (diff truncated)"
                print(f"Diff truncated to {max_diff_size} characters")

            # Simple comment for now - Continue API integration can be added later
            print("Posting review comment...")
            
            comment_body = "## ü§ñ Continue AI Review\\n\\n"
            comment_body += "This is a test comment to verify the Continue review action is working.\\n\\n"
            comment_body += "**PR Summary:**\\n"
            comment_body += f"- Title: {pr.title}\\n"
            comment_body += f"- Files changed: {file_count}\\n"
            comment_body += f"- Diff size: {diff_size} characters\\n\\n"
            comment_body += "The full AI review functionality will be enabled once the Continue API integration is configured.\\n\\n"
            comment_body += "---\\n"
            comment_body += "*Powered by [Continue](https://continue.dev)*"

            # Post comment
            comment = pr.create_issue_comment(comment_body)
            print(f"Comment posted successfully! ID: {comment.id}")
            
        except Exception as e:
            print(f"Error during review: {str(e)}")
            print(f"Traceback: {traceback.format_exc()}")
            
            # Try to post error as comment
            try:
                error_comment = "## ‚ùå Continue Review Error\\n\\n"
                error_comment += "Failed to complete review due to an error:\\n"
                error_comment += f"```\\n{str(e)}\\n```\\n\\n"
                error_comment += "Please check the workflow logs for more details."
                pr.create_issue_comment(error_comment)
                print("Error comment posted")
            except Exception as e2:
                print(f"Failed to post error comment: {str(e2)}")
            
            sys.exit(1)

        print("=== Continue Review Agent Completed ===")
        EOF

        # Set GitHub context
        export GITHUB_CONTEXT='${{ toJson(github) }}'
        
        # Run the review script
        python /tmp/continue_review.py
      shell: bash

branding:
  icon: 'code'
  color: 'blue'