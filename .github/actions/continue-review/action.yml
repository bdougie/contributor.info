name: 'Continue Base Review'
description: 'Perform code review using Continue AI on pull requests'
author: 'Continue'

inputs:
  continue-api-key:
    description: 'API key for AI service (Anthropic or OpenAI)'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  model:
    description: 'Model to use for code review'
    required: false
    default: 'claude-3-5-sonnet-20241022'
  provider:
    description: 'Provider for the model (anthropic or openai)'
    required: false
    default: 'anthropic'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install requests PyGithub anthropic openai
      shell: bash

    - name: Run Continue Review
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        CONTINUE_API_KEY: ${{ inputs.continue-api-key }}
        CONTINUE_MODEL: ${{ inputs.model }}
        CONTINUE_PROVIDER: ${{ inputs.provider }}
      run: |
        cat > /tmp/continue_review.py << 'EOF'
        import os
        import json
        import sys
        import traceback
        from github import Github

        print("=== Continue Review Agent Starting ===")

        # Get environment variables
        github_token = os.environ.get('GITHUB_TOKEN')
        api_key = os.environ.get('CONTINUE_API_KEY')
        model = os.environ.get('CONTINUE_MODEL', 'claude-3-5-sonnet-20241022')
        provider = os.environ.get('CONTINUE_PROVIDER', 'anthropic').lower()

        print(f"Model: {model}")
        print(f"Provider: {provider}")
        print(f"API Key present: {bool(api_key)}")

        # Get GitHub context
        github_context = json.loads(os.environ.get('GITHUB_CONTEXT', '{}'))
        repo_name = github_context.get('repository', '')
        
        print(f"Repository: {repo_name}")
        
        # Handle different event types
        event_name = github_context.get('event_name', '')
        print(f"Event type: {event_name}")
        
        pr_number = None
        if event_name == 'pull_request':
            pr_number = github_context.get('event', {}).get('pull_request', {}).get('number')
        elif event_name == 'issue_comment':
            pr_number = github_context.get('event', {}).get('issue', {}).get('number')
        elif event_name == 'workflow_dispatch':
            pr_number = github_context.get('event', {}).get('inputs', {}).get('pr_number')
            if not pr_number:
                print("Workflow dispatch without PR number, exiting")
                sys.exit(0)
        else:
            print(f"Unsupported event type: {event_name}")
            sys.exit(0)

        if not pr_number:
            print("No PR number found")
            sys.exit(0)

        print(f"PR Number: {pr_number}")

        try:
            # Initialize GitHub client
            g = Github(github_token)
            repo = g.get_repo(repo_name)
            pr = repo.get_pull(pr_number)
            
            print(f"PR Title: {pr.title}")
            print(f"PR State: {pr.state}")

            # Get PR diff
            files = pr.get_files()
            
            diff_content = []
            file_count = 0
            for file in files:
                file_count += 1
                if file.patch:
                    diff_content.append(f"File: {file.filename}\n{file.patch}")
            
            print(f"Files changed: {file_count}")
            
            if not diff_content:
                print("No changes to review")
                sys.exit(0)

            full_diff = "\n\n".join(diff_content)
            diff_size = len(full_diff)
            print(f"Diff size: {diff_size} characters")

            # Truncate diff if too large
            max_diff_size = 10000
            if diff_size > max_diff_size:
                full_diff = full_diff[:max_diff_size] + "\n\n... (diff truncated)"
                print(f"Diff truncated to {max_diff_size} characters")

            # Check if API key is available
            if not api_key:
                print("No API key found, posting informational comment")
                comment_body = "## ü§ñ Continue AI Review\n\n"
                comment_body += "‚ö†Ô∏è **Configuration Required**: API key not set.\n\n"
                comment_body += "**PR Summary:**\n"
                comment_body += f"- Title: {pr.title}\n"
                comment_body += f"- Files changed: {file_count}\n"
                comment_body += f"- Diff size: {diff_size} characters\n\n"
                comment_body += "To enable AI reviews:\n"
                comment_body += "1. Add `CONTINUE_API_KEY` secret with your Anthropic or OpenAI API key\n"
                comment_body += "2. The review will automatically generate on PR events\n\n"
                comment_body += "---\n"
                comment_body += "*Powered by [Continue](https://continue.dev)*"
            else:
                print(f"Generating AI review using {provider}...")
                
                review_prompt = f"""Review this pull request and provide constructive feedback.

PR Title: {pr.title}
Files changed: {file_count}

Focus on:
1. Code quality and best practices
2. Potential bugs or issues  
3. Security concerns
4. Performance implications
5. Suggestions for improvement

Be specific and actionable in your feedback. If the code looks good, acknowledge that too.

Changes:
{full_diff}"""

                review_text = None
                
                if provider == 'anthropic':
                    try:
                        import anthropic
                        client = anthropic.Anthropic(api_key=api_key)
                        
                        message = client.messages.create(
                            model=model,
                            max_tokens=2000,
                            temperature=0.3,
                            system="You are an expert code reviewer. Provide clear, constructive feedback on pull requests. Be concise but thorough.",
                            messages=[
                                {"role": "user", "content": review_prompt}
                            ]
                        )
                        review_text = message.content[0].text
                        print("Successfully generated review with Anthropic")
                    except Exception as e:
                        print(f"Anthropic API error: {str(e)}")
                        review_text = f"Failed to generate review: {str(e)}"
                        
                elif provider == 'openai':
                    try:
                        import openai
                        client = openai.OpenAI(api_key=api_key)
                        
                        response = client.chat.completions.create(
                            model=model if 'gpt' in model else 'gpt-4-turbo-preview',
                            messages=[
                                {"role": "system", "content": "You are an expert code reviewer. Provide clear, constructive feedback on pull requests. Be concise but thorough."},
                                {"role": "user", "content": review_prompt}
                            ],
                            temperature=0.3,
                            max_tokens=2000
                        )
                        review_text = response.choices[0].message.content
                        print("Successfully generated review with OpenAI")
                    except Exception as e:
                        print(f"OpenAI API error: {str(e)}")
                        review_text = f"Failed to generate review: {str(e)}"
                else:
                    review_text = f"Unsupported provider: {provider}. Please use 'anthropic' or 'openai'."
                
                # Build the comment
                comment_body = "## ü§ñ Continue AI Review\n\n"
                comment_body += review_text
                comment_body += "\n\n---\n"
                comment_body += f"*Model: {model} | Powered by [Continue](https://continue.dev)*"

            # Post comment
            print("Posting review comment...")
            comment = pr.create_issue_comment(comment_body)
            print(f"Comment posted successfully! ID: {comment.id}")
            
        except Exception as e:
            print(f"Error during review: {str(e)}")
            print(f"Traceback: {traceback.format_exc()}")
            
            # Try to post error as comment
            try:
                error_comment = "## ‚ùå Continue Review Error\n\n"
                error_comment += "Failed to complete review due to an error:\n"
                error_comment += f"```\n{str(e)}\n```\n\n"
                error_comment += "Please check the workflow logs for more details."
                pr.create_issue_comment(error_comment)
                print("Error comment posted")
            except Exception as e2:
                print(f"Failed to post error comment: {str(e2)}")
            
            sys.exit(1)

        print("=== Continue Review Agent Completed ===")
        EOF

        # Set GitHub context
        export GITHUB_CONTEXT='${{ toJson(github) }}'
        
        # Run the review script
        python /tmp/continue_review.py
      shell: bash

branding:
  icon: 'code'
  color: 'blue'